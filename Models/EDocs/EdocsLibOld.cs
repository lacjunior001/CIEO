/*
// Skeleton generated by Hyland Unity Editor on 04/10/2021 16:34:01
// NOTE: Namespace name has been changed to avoid VB.NET import errors when the namespace and class have the same name.
namespace CIEO.Models.EDocs
{
    using System;
    using System.IO;
    using System.Linq;
    using System.Collections.Generic;
    using System.Net.Http;
    using System.Net.Http.Headers;
    using Hyland.Unity;
    using Hyland.Unity.CodeAnalysis;
    using RestSharp;
    using Newtonsoft.Json;

    /// <summary>
    /// E-Docs: Biblioteca
    /// </summary>
    #region E-Docs Metodos de Integração
    public class EDocsBiblioteca
    {
        /// <summary>
        /// Endereço do E-Docs.
        /// </summary>
        private string Url { get; set; }
        /// <summary>
        /// Token do usuário.
        /// </summary>
        private string Token { get; set; }
        private RestClient Client { get; set; }
        private RestRequest Request { get; set; }
        /// <summary>
        /// Código do Erro. 
        /// -1 = erro na execução da biblioteca. 
        /// 0 = TimeOut. 
        /// Demais códigos consultar documentação online sobre códigos http.
        /// </summary>
        public int ErroCod { get; private set; }
        /// <summary>
        /// Descrição do Erro.
        /// </summary>
        public ErrorResult ErroResultado { get; private set; }
        public string ErroConteudo { get; private set; }
        private static readonly log4net.ILog logEDocs = log4net.LogManager.GetLogger(System.Reflection.MethodBase.GetCurrentMethod().DeclaringType);
        #region UploadDocumentos
        /// <summary>
        /// Executa o envio do Documento para o E-Docs.
        /// </summary>
        /// <param name="dadosUpload">Dados Usados para Executar o Envio</param>
        /// <returns>Retorna a GUID de Evento</returns>
        public string UploadDocumento(ref DadosUpload dadosUpload)
        {
            ErroCod = -1;
            string eventoId = null;
            try
            {
                if (dadosUpload.DocumentoRegistrar.RestricaoAcesso == null)
                {
                    throw new Exception("Dados de Restrição de Acesso não implementados.");
                }
                dadosUpload.DocumentoArquivo = ReservaEspacoUpload(dadosUpload.Arquivo.Length);

                if (dadosUpload.DocumentoArquivo != null)
                {
                    dadosUpload.DocumentoRegistrar.IdentificadorTemporarioArquivoNaNuvem = dadosUpload.DocumentoArquivo.IdentificadorTemporarioArquivoNaNuvem;
                    if (UploadArquivo(ref dadosUpload))
                    {
                        string endereco = null;
                        string json = null;
                        string validadeICP = null;
                        switch (dadosUpload.TipodaClasse)
                        {
                            case "DocumentoDigitalizadoServidor":
                                endereco = $"capturar/digitalizado/servidor";
                                json = JsonConvert.SerializeObject((DocumentoDigitalizadoServidor)dadosUpload.DocumentoRegistrar);
                                break;
                            case "DocumentoNatoDigitalCopiaServidor":
                                endereco = $"capturar/nato-digital/copia/servidor";
                                json = JsonConvert.SerializeObject((DocumentoNatoDigitalCopiaServidor)dadosUpload.DocumentoRegistrar);
                                break;
                            case "DocumentoNatoDigitalAssinaturaEletronicaServidor":
                                endereco = $"capturar/nato-digital/auto-assinado/servidor";
                                json = JsonConvert.SerializeObject((DocumentoNatoDigitalAssinaturaEletronicaServidor)dadosUpload.DocumentoRegistrar);
                                break;
                            case "DocumentoNatoDigitalIcpBrasilServidor":
                                validadeICP = VerificaValidadeICP(dadosUpload.DocumentoRegistrar.IdentificadorTemporarioArquivoNaNuvem);
                                if (validadeICP == null)
                                {
                                    throw new Exception("RespostaDiferenteDaEsperada");
                                }
                                endereco = $"capturar/nato-digital/icp-brasil/servidor";
                                json = JsonConvert.SerializeObject((DocumentoNatoDigitalIcpBrasilServidor)dadosUpload.DocumentoRegistrar);
                                break;
                            case "DocumentoNatoDigitalMultiplasAssinaturasServidor":
                                endereco = $"fase-assinatura/enviar/servidor";
                                json = JsonConvert.SerializeObject((DocumentoNatoDigitalMultiplasAssinaturasServidor)dadosUpload.DocumentoRegistrar);
                                break;
                            case "DocumentoDigitalizadoCidadao":
                                endereco = $"capturar/digitalizado/cidadao";
                                json = JsonConvert.SerializeObject((DocumentoDigitalizadoCidadao)dadosUpload.DocumentoRegistrar);
                                break;
                            case "DocumentoNatoDigitalAssinaturaEletronicaCidadao":
                                endereco = $"capturar/nato-digital/auto-assinado/cidadao";
                                json = JsonConvert.SerializeObject((DocumentoNatoDigitalAssinaturaEletronicaCidadao)dadosUpload.DocumentoRegistrar);
                                break;
                            case "DocumentoNatoDigitalCopiaCidadao":
                                endereco = $"capturar/nato-digital/copia/cidadao";
                                json = JsonConvert.SerializeObject((DocumentoNatoDigitalCopiaCidadao)dadosUpload.DocumentoRegistrar);
                                break;
                            case "DocumentoNatoDigitalIcpBrasilCidadao":
                                validadeICP = VerificaValidadeICP(dadosUpload.DocumentoRegistrar.IdentificadorTemporarioArquivoNaNuvem);
                                if (validadeICP == null)
                                {
                                    throw new Exception("RespostaDiferenteDaEsperada");
                                }
                                endereco = $"capturar/nato-digital/icp-brasil/cidadao";
                                json = JsonConvert.SerializeObject((DocumentoNatoDigitalIcpBrasilCidadao)dadosUpload.DocumentoRegistrar);
                                break;
                            case "DocumentoNatoDigitalMultiplasAssinaturasCidadao":
                                endereco = $"fase-assinatura/enviar/servidor";
                                json = JsonConvert.SerializeObject((DocumentoNatoDigitalMultiplasAssinaturasCidadao)dadosUpload.DocumentoRegistrar);
                                break;
                            default:
                                throw new Exception("Não identificado o tipo de Envio.");
                        }
                        Client = new RestClient($"{Url}v2/documentos/{endereco}");
                        Request = new RestRequest(Method.POST);
                        Request.AddHeader("Authorization", $"Bearer {Token}");
                        Request.AddHeader("Content-Type", "application/json-patch+json");
                        Request.AddJsonBody(json);
                        var response = Client.Execute(Request);
                        if (response.IsSuccessful)
                        {
                            eventoId = response.Content;
                            ErroCod = (int)response.StatusCode;
                            ErroResultado.Erro = "Sucesso";
                        }
                        else
                        {
                            ErroCod = (int)response.StatusCode;
                            if (string.IsNullOrWhiteSpace(response.Content))
                            {
                                ErroResultado.Erro = "API E-Docs não retornou conteúdo.";
                            }
                            else
                            {
                                ErroResultado = JsonConvert.DeserializeObject<ErrorResult>(response.Content);
                            }
                            logEDocs.Error($"OnBase.Biblioteca.Edocs.UploadDocumento.Código:<<{response.StatusCode}>>.Conteúdo:<<{response.Content}>>");
                            throw new Exception("RespostaDiferenteDaEsperada");
                        }
                    }
                    else
                    {
                        throw new Exception("RespostaDiferenteDaEsperada");
                    }
                }
                else
                {
                    throw new Exception("RespostaDiferenteDaEsperada");
                }
            }
            catch (Exception e)
            {
                if (!e.Message.Equals("RespostaDiferenteDaEsperada"))
                {
                    ErroCod = -1;
                    ErroResultado.Erro = e.Message.ToString();
                    logEDocs.Error("OnBase.Biblioteca.E-Docs.UploadDocumento.Erro:", e);
                }
            }
            return eventoId;
        }

        /// <summary>
        /// Reserva no E-Docs o espaço para enviar o documento.(1º Etapa)
        /// </summary>
        /// <param name="tamanho">Tamanho do arquivo</param>
        /// <returns>True = Sucesso / False = Algum Erro</returns>
        private DocumentoArquivo ReservaEspacoUpload(long tamanho)
        {
            DocumentoArquivo reserva = null;
            try
            {
                Client = new RestClient($"{Url}v2/documentos/upload-arquivo/gerar-url/{tamanho}");
                Request = new RestRequest(Method.GET);
                Request.AddHeader("Authorization", $"Bearer {Token}");
                IRestResponse response = Client.Execute(Request);
                if (response.IsSuccessful)
                {
                    reserva = JsonConvert.DeserializeObject<DocumentoArquivo>(response.Content);
                    ErroCod = (int)response.StatusCode;
                    ErroResultado.Erro = "ReservaEspacoUpload: Sucesso";
                }
                else
                {
                    ErroCod = (int)response.StatusCode;
                    if (string.IsNullOrWhiteSpace(response.Content))
                    {
                        ErroResultado.Erro = "API E-Docs não retornou conteúdo.";
                    }
                    else
                    {
                        ErroResultado = JsonConvert.DeserializeObject<ErrorResult>(response.Content);
                    }
                    logEDocs.Error($"OnBase.Biblioteca.E-Docs.ReservaEspacoUpload.Código:<<{response.StatusCode}>>.Conteúdo:<<{response.Content}>>");
                    throw new Exception("RespostaDiferenteDaEsperada");
                }
            }
            catch (Exception e)
            {
                if (!e.Message.Equals("RespostaDiferenteDaEsperada"))
                {
                    ErroCod = -1;
                    ErroResultado.Erro = e.Message.ToString();
                    logEDocs.Error("OnBase.Biblioteca.E-Docs.ReservaEspacoUpload.Erro:", e);
                }
            }
            return reserva;
        }


        /// <summary>
        /// Envia o Arquivo para o E-Docs.(2º Etapa)
        /// </summary>
        /// <param name="dadosUpload">Dados Usados para Executar o Envio</param>
        /// <returns>True = Sucesso / False = Algum Erro</returns>
        private bool UploadArquivo(ref DadosUpload dadosUpload)
        {
            bool enviado = false;
            try
            {
                HttpClient client = new HttpClient();
                client.DefaultRequestHeaders.Add("Accept", "application/json");
                MemoryStream memoryStream = new MemoryStream(dadosUpload.Arquivo);
                StreamContent streamContent = new StreamContent(memoryStream);
                streamContent.Headers.ContentType = MediaTypeHeaderValue.Parse("application/octet-stream");
                streamContent.Headers.ContentDisposition = new ContentDispositionHeaderValue("form-data")
                {
                    Name = "file", //nome do parâmetro do arquivo, não alterar
                    FileName = dadosUpload.DocumentoRegistrar.NomeArquivo //na prática esse nome aqui não será utilizado???
                };
                var content = new MultipartFormDataContent { streamContent };
                foreach (var item in dadosUpload.DocumentoArquivo.Body)
                {
                    content.Add(new StringContent(item.Value), item.Key);
                }
                var response = client.PostAsync(dadosUpload.DocumentoArquivo.Url, content);
                response.Wait();
                if (response.Result.IsSuccessStatusCode)
                {
                    enviado = true;
                    ErroCod = (int)response.Result.StatusCode;
                    ErroResultado.Erro = "UploadArquivo: Sucesso";
                }
                else
                {
                    ErroCod = (int)response.Result.StatusCode;
                    string conteudo = response.Result.Content.ToString();
                    if (string.IsNullOrWhiteSpace(conteudo))
                    {
                        ErroResultado.Erro = "API E-Docs não retornou conteúdo.";
                    }
                    else
                    {
                        ErroConteudo = conteudo;
                    }
                    logEDocs.Error($"OnBase.Biblioteca.Edocs.UploadTemporario.Código:<<{response.Result.StatusCode}>>.Conteúdo:<<{conteudo}>>");
                    throw new Exception("RespostaDiferenteDaEsperada");
                }
            }
            catch (Exception e)
            {
                enviado = false;
                if (!e.Message.Equals("RespostaDiferenteDaEsperada"))
                {
                    ErroCod = -1;
                    ErroResultado.Erro = e.Message.ToString();
                    logEDocs.Error("OnBase.Biblioteca.E-Docs.UploadTemporario.Erro:", e);
                }
            }
            return enviado;
        }


        /// <summary>
        /// Verifica se o Documento Possui Assinatura Digital ICP-Brasil Válida.
        /// Ainda não implementado. Deve ser feita antes da terceira etapa.
        /// </summary>
        /// <param name="identificador">Identificador Temporário do Arquivo</param>
        /// <returns>True = Válida / False = Inválida ou Inexistente</returns>
        private string VerificaValidadeICP(string identificador)
        {
            string valido = null;
            CertificadoDigitalResposta certificado = null;
            try
            {
                Client = new RestClient($"{Url}/v2/documentos/assinatura-digital-valida");
                Request = new RestRequest(Method.POST);
                Request.AddHeader("Authorization", $"Bearer {Token}");
                Request.AddHeader("Content-Type", "multipart/form-data");
                Request.AddParameter("IdentificadorTemporarioArquivoNaNuvem", identificador);
                Request.AlwaysMultipartFormData = true;
                IRestResponse response = Client.Execute(Request);
                if (response.IsSuccessful)
                {
                    certificado = JsonConvert.DeserializeObject<CertificadoDigitalResposta>(response.Content);
                    ErroCod = (int)response.StatusCode;
                    if (certificado.IsSuccess)
                    {
                        ErroResultado.Erro = "Sucesso";
                    }
                    else
                    {
                        ErroResultado.Erro = certificado.Message;
                        logEDocs.Error($"OnBase.Biblioteca.Edocs.AutuarProcesso.Código:<<{response.StatusCode}>>.Conteúdo:<<{response.Content}>>");
                        throw new Exception("RespostaDiferenteDaEsperada");
                    }
                }
                else
                {
                    ErroCod = (int)response.StatusCode;
                    if (string.IsNullOrWhiteSpace(response.Content))
                    {
                        ErroResultado.Erro = "API E-Docs não retornou conteúdo.";
                    }
                    else
                    {
                        ErroResultado = JsonConvert.DeserializeObject<ErrorResult>(response.Content);
                    }
                    logEDocs.Error($"OnBase.Biblioteca.Edocs.AutuarProcesso.Código:<<{response.StatusCode}>>.Conteúdo:<<{response.Content}>>");
                    throw new Exception("RespostaDiferenteDaEsperada");
                }
            }
            catch (Exception e)
            {
                valido = null;
                if (!e.Message.Equals("RespostaDiferenteDaEsperada"))
                {
                    ErroCod = -1;
                    ErroResultado.Erro = e.Message.ToString();
                    logEDocs.Error("OnBase.Biblioteca.E-Docs.UploadTemporario.Erro:", e);
                }
            }
            return valido;
        }
        #endregion
        #region Eventos
        /// <summary>
        /// Retorna o estado do evento. Cada ato no E-Docs retorna um GUID de evento que deve ser consultado para saber se a ação foi executada.
        /// </summary>
        /// <param name="GUIdEvento">GUId de Evento retornado ao praticar um ato no E-Docs</param>
        /// <returns>Evento com suas informações</returns>
        public Evento ConsultarEvento(string GUIdEvento)
        {
            ErroCod = -5;
            GUIdEvento = GUIdEvento.Replace("\"", "");
            Evento evento = null;
            try
            {
                Client = new RestClient($"{Url}v2/eventos/{GUIdEvento}");
                Request = new RestRequest(Method.GET);
                Request.AddHeader("Authorization", $"Bearer {Token}");
                IRestResponse response = Client.Execute(Request);
                if (response.IsSuccessful)
                {
                    evento = JsonConvert.DeserializeObject<Evento>(response.Content);
                    ErroCod = (int)response.StatusCode;
                    ErroResultado.Erro = "Sucesso";
                }
                else
                {
                    ErroCod = (int)response.StatusCode;
                    if (string.IsNullOrWhiteSpace(response.Content))
                    {
                        ErroResultado.Erro = "Retorno Vazio";
                    }
                    else
                    {
                        ErroResultado = JsonConvert.DeserializeObject<ErrorResult>(response.Content);
                    }
                    logEDocs.Error($"OnBase.Biblioteca.Edocs.ConsultarEvento.Código:<<{response.StatusCode}>>.Conteúdo:<<{response.Content}>>");
                    throw new Exception("RespostaDiferenteDaEsperada");
                }
            }
            catch (Exception e)
            {
                if (!e.Message.Equals("RespostaDiferenteDaEsperada"))
                {
                    ErroCod = -1;
                    ErroResultado.Erro = e.Message.ToString();
                    logEDocs.Error("OnBase.Biblioteca.E-Docs.ConsultarEvento.Erro:", e);
                }
            }
            return evento;
        }
        #endregion
        #region Consultas
        /// <summary>
        /// Recupera as informações de um Documento na API.
        /// </summary>
        /// <param name="GUIdDocumento">GUId Correspondente ao Documento</param>
        /// <returns>Dados do Documento no E-Docs</returns>
        public Documento ConsultarDocumento(string GUIdDocumento)
        {
            Documento documento = null;
            try
            {
                Client = new RestClient($"{Url}v2/Documentos/{GUIdDocumento}");
                Request = new RestRequest(Method.GET);
                Request.AddHeader("Authorization", $"Bearer {Token}");
                IRestResponse response = Client.Execute(Request);
                if (response.IsSuccessful)
                {
                    documento = JsonConvert.DeserializeObject<Documento>(response.Content);
                    ErroCod = (int)response.StatusCode;
                    ErroResultado.Erro = "Sucesso";
                }
                else
                {
                    ErroCod = (int)response.StatusCode;
                    if (string.IsNullOrWhiteSpace(response.Content))
                    {
                        ErroResultado.Erro = "Retorno Vazio";
                    }
                    else
                    {
                        ErroResultado = JsonConvert.DeserializeObject<ErrorResult>(response.Content);
                    }
                    logEDocs.Error($"OnBase.Biblioteca.Edocs.ConsultarDocumento.Código:<<{response.StatusCode}>>.Conteúdo:<<{response.Content}>>");
                    throw new Exception("RespostaDiferenteDaEsperada");
                }
            }
            catch (Exception e)
            {
                if (!e.Message.Equals("RespostaDiferenteDaEsperada"))
                {
                    ErroCod = -1;
                    ErroResultado.Erro = e.Message.ToString();
                    logEDocs.Error("OnBase.Biblioteca.E-Docs.ConsultarDocumento.Erro:", e);
                }
            }
            return documento;
        }
        /// <summary>
        /// Recupera as informações do Processo na API.
        /// </summary>
        /// <param name="GUIdProcesso">GUId Correspondente ao Processo</param>
        /// <returns>Dados do Processo no E-Docs</returns>
        public Processo ConsultarProcesso(string GUIdProcesso)
        {
            Processo processo = null;
            try
            {
                Client = new RestClient($"{Url}v2/Processos/{GUIdProcesso}");
                Request = new RestRequest(Method.GET);
                Request.AddHeader("Authorization", $"Bearer {Token}");
                IRestResponse response = Client.Execute(Request);
                if (response.IsSuccessful)
                {
                    processo = JsonConvert.DeserializeObject<Processo>(response.Content);
                    ErroCod = (int)response.StatusCode;
                    ErroResultado.Erro = "Sucesso";
                }
                else
                {
                    ErroCod = (int)response.StatusCode;
                    if (string.IsNullOrWhiteSpace(response.Content))
                    {
                        ErroResultado.Erro = "Retorno Vazio";
                    }
                    else
                    {
                        ErroResultado = JsonConvert.DeserializeObject<ErrorResult>(response.Content);
                    }
                    logEDocs.Error($"OnBase.Biblioteca.Edocs.ConsultarProcesso.Código:<<{response.StatusCode}>>.Conteúdo:<<{response.Content}>>");
                    throw new Exception("RespostaDiferenteDaEsperada");
                }
            }
            catch (Exception e)
            {
                if (!e.Message.Equals("RespostaDiferenteDaEsperada"))
                {
                    ErroCod = -1;
                    ErroResultado.Erro = e.Message.ToString();
                    logEDocs.Error("OnBase.Biblioteca.E-Docs.ConsultarProcesso.Erro:", e);
                }
            }
            return processo;
        }
        public List<Documento> ConsultarAtos(string GUIDProcesso)
        {
            List<Documento> listaDocAtos = null;
            try
            {
                Client = new RestClient($"{Url}v2/Processos/{GUIDProcesso}/atos");
                Request = new RestRequest(Method.GET);
                Request.AddHeader("Authorization", $"Bearer {Token}");
                IRestResponse response = Client.Execute(Request);
                if (response.IsSuccessful)
                {
                    listaDocAtos = JsonConvert.DeserializeObject<List<Documento>>(response.Content);
                    ErroCod = (int)response.StatusCode;
                    ErroResultado.Erro = "Sucesso";
                }
                else
                {
                    ErroCod = (int)response.StatusCode;
                    if (string.IsNullOrWhiteSpace(response.Content))
                    {
                        ErroResultado.Erro = "Retorno Vazio";
                    }
                    else
                    {
                        ErroResultado = JsonConvert.DeserializeObject<ErrorResult>(response.Content);
                    }
                    logEDocs.Error($"OnBase.Biblioteca.Edocs.ConsultarProcesso.Código:<<{response.StatusCode}>>.Conteúdo:<<{response.Content}>>");
                    throw new Exception("RespostaDiferenteDaEsperada");
                }
            }
            catch (Exception e)
            {
                if (!e.Message.Equals("RespostaDiferenteDaEsperada"))
                {
                    ErroCod = -1;
                    ErroResultado.Erro = e.Message.ToString();
                    logEDocs.Error("OnBase.Biblioteca.E-Docs.ConsultarDocumentosAto.Erro:", e);
                }
            }
            return listaDocAtos;
        }
        public List<DocumentoAto> ConsultarDocumentosAto(string GUIDProcesso, string GUIDAto)
        {
            List<DocumentoAto> listaDocAtos = null;
            try
            {
                Client = new RestClient($"{Url}v2/Processos/{GUIDProcesso}/atos/{GUIDAto}/documentos");
                Request = new RestRequest(Method.GET);
                Request.AddHeader("Authorization", $"Bearer {Token}");
                IRestResponse response = Client.Execute(Request);
                if (response.IsSuccessful)
                {
                    listaDocAtos = JsonConvert.DeserializeObject<List<DocumentoAto>>(response.Content);
                    ErroCod = (int)response.StatusCode;
                    ErroResultado.Erro = "Sucesso";
                }
                else
                {
                    ErroCod = (int)response.StatusCode;
                    if (string.IsNullOrWhiteSpace(response.Content))
                    {
                        ErroResultado.Erro = "Retorno Vazio";
                    }
                    else
                    {
                        ErroResultado = JsonConvert.DeserializeObject<ErrorResult>(response.Content);
                    }
                    logEDocs.Error($"OnBase.Biblioteca.Edocs.ConsultarProcesso.Código:<<{response.StatusCode}>>.Conteúdo:<<{response.Content}>>");
                    throw new Exception("RespostaDiferenteDaEsperada");
                }
            }
            catch (Exception e)
            {
                if (!e.Message.Equals("RespostaDiferenteDaEsperada"))
                {
                    ErroCod = -1;
                    ErroResultado.Erro = e.Message.ToString();
                    logEDocs.Error("OnBase.Biblioteca.E-Docs.ConsultarDocumentosAto.Erro:", e);
                }
            }
            return listaDocAtos;
        }
        #endregion
        #region Autuar Processo
        /// <summary>
        /// Autua processo no E-Docs.
        /// </summary>
        /// <param name="autuarProcesso">Objeto que será serializado em JSON e enviado.</param>
        /// <returns>GUID de Evento</returns>
        public string AutuarProcesso(PedidoDeAutuacao pedidoDeAutuacao)
        {
            ErroCod = -1;
            string eventoId = null;
            try
            {
                Client = new RestClient($"{Url}v2/Processos/Autuar");
                Request = new RestRequest(Method.POST);
                Request.AddHeader("Authorization", $"Bearer {Token}");
                Request.AddHeader("Content-Type", "application/json-patch+json");
                Request.AddJsonBody(JsonConvert.SerializeObject(pedidoDeAutuacao));
                var response = Client.Execute(Request);
                if (response.IsSuccessful)
                {
                    eventoId = response.Content;
                    ErroCod = (int)response.StatusCode;
                    ErroResultado.Erro = "Sucesso";
                }
                else
                {
                    ErroCod = (int)response.StatusCode;
                    if (string.IsNullOrWhiteSpace(response.Content))
                    {
                        ErroResultado.Erro = "API E-Docs não retornou conteúdo.";
                    }
                    else
                    {
                        ErroConteudo = response.Content;
                        //ErroResultado = JsonConvert.DeserializeObject<ErrorResult>(response.Content);
                    }
                    logEDocs.Error($"OnBase.Biblioteca.Edocs.AutuarProcesso.Código:<<{response.StatusCode}>>.Conteúdo:<<{response.Content}>>");
                    throw new Exception("RespostaDiferenteDaEsperada");
                }
            }
            catch (Exception e)
            {
                if (!e.Message.Equals("RespostaDiferenteDaEsperada"))
                {
                    ErroCod = -1;
                    ErroResultado.Erro = e.Message.ToString();
                    logEDocs.Error("OnBase.Biblioteca.E-Docs.AutuarProcesso.Erro:", e);
                }
            }
            return eventoId;
        }
        #endregion
        #region Entranhar Documentos
        /// <summary>
        /// Etranha Documentos novos documentos a um processo sem que este seja movimentado.
        /// </summary>
        /// <returns></returns>
        public string EntranharDocumentos(PedidoDeEntranhamento pedidoDeEntranhamento)
        {
            ErroCod = -1;
            string eventoId = null;
            try
            {
                Client = new RestClient($"{Url}/v2/processos/entranhar-documentos");
                Request = new RestRequest(Method.POST);
                Request.AddHeader("Authorization", $"Bearer {Token}");
                Request.AddHeader("Content-Type", "application/json-patch+json");
                Request.AddJsonBody(JsonConvert.SerializeObject(pedidoDeEntranhamento));
                var response = Client.Execute(Request);
                if (response.IsSuccessful)
                {
                    eventoId = response.Content;
                    ErroCod = (int)response.StatusCode;
                    ErroResultado.Erro = "Sucesso";
                }
                else
                {
                    ErroCod = (int)response.StatusCode;
                    if (string.IsNullOrWhiteSpace(response.Content))
                    {
                        ErroResultado.Erro = "API E-Docs não retornou conteúdo.";
                    }
                    else
                    {
                        ErroResultado = JsonConvert.DeserializeObject<ErrorResult>(response.Content);
                    }
                    logEDocs.Error($"OnBase.Biblioteca.Edocs.EntranharDocumentos.Código:<<{response.StatusCode}>>.Conteúdo:<<{response.Content}>>");
                    throw new Exception("RespostaDiferenteDaEsperada");
                }
            }
            catch (Exception e)
            {
                if (!e.Message.Equals("RespostaDiferenteDaEsperada"))
                {
                    ErroCod = -1;
                    ErroResultado.Erro = e.Message.ToString();
                    logEDocs.Error("OnBase.Biblioteca.E-Docs.EntranharDocumentos.Erro:", e);
                }
            }
            return eventoId;
        }
        #endregion
        #region Despachar Processo
        /// <summary>
        /// Despacha o processo para outro responsável.
        /// </summary>
        /// <returns></returns>
        public string DespacharProcesso(PedidoDespacho pedidoDespacho)
        {
            ErroCod = -1;
            string eventoId = null;
            try
            {
                Client = new RestClient($"{Url}/v2/processos/despachar");
                Request = new RestRequest(Method.POST);
                Request.AddHeader("Authorization", $"Bearer {Token}");
                Request.AddHeader("Content-Type", "application/json-patch+json");
                Request.AddJsonBody(JsonConvert.SerializeObject(pedidoDespacho));
                var response = Client.Execute(Request);
                if (response.IsSuccessful)
                {
                    eventoId = response.Content;
                    ErroCod = (int)response.StatusCode;
                    ErroResultado.Erro = "Sucesso";
                }
                else
                {
                    ErroCod = (int)response.StatusCode;
                    if (string.IsNullOrWhiteSpace(response.Content))
                    {
                        ErroResultado.Erro = "API E-Docs não retornou conteúdo.";
                    }
                    else
                    {
                        ErroResultado = JsonConvert.DeserializeObject<ErrorResult>(response.Content);
                    }
                    logEDocs.Error($"OnBase.Biblioteca.Edocs.DespacharProcesso.Código:<<{response.StatusCode}>>.Conteúdo:<<{response.Content}>>");
                    throw new Exception("RespostaDiferenteDaEsperada");
                }
            }
            catch (Exception e)
            {
                if (!e.Message.Equals("RespostaDiferenteDaEsperada"))
                {
                    ErroCod = -1;
                    ErroResultado.Erro = e.Message.ToString();
                    logEDocs.Error("OnBase.Biblioteca.E-Docs.DespacharProcesso.Erro:", e);
                }
            }
            return eventoId;
        }
        #endregion
        #region Encerrar Processo
        /// <summary>
        /// Despacha o processo para outro responsável.
        /// </summary>
        /// <returns></returns>
        public string EncerrarProcesso(PedidoEncerrar pedidoEncerrar)
        {
            ErroCod = -1;
            string eventoId = null;
            try
            {
                Client = new RestClient($"{Url}/v2/processos/encerrar");
                Request = new RestRequest(Method.POST);
                Request.AddHeader("Authorization", $"Bearer {Token}");
                Request.AddHeader("Content-Type", "application/json-patch+json");
                Request.AddJsonBody(JsonConvert.SerializeObject(pedidoEncerrar));
                var response = Client.Execute(Request);
                if (response.IsSuccessful)
                {
                    eventoId = response.Content;
                    ErroCod = (int)response.StatusCode;
                    ErroResultado.Erro = "Sucesso";
                }
                else
                {
                    ErroCod = (int)response.StatusCode;
                    if (string.IsNullOrWhiteSpace(response.Content))
                    {
                        ErroResultado.Erro = "API E-Docs não retornou conteúdo.";
                    }
                    else
                    {
                        ErroResultado = JsonConvert.DeserializeObject<ErrorResult>(response.Content);
                    }
                    logEDocs.Error($"OnBase.Biblioteca.Edocs.EncerrarProcesso.Código:<<{response.StatusCode}>>.Conteúdo:<<{response.Content}>>");
                    throw new Exception("RespostaDiferenteDaEsperada");
                }
            }
            catch (Exception e)
            {
                if (!e.Message.Equals("RespostaDiferenteDaEsperada"))
                {
                    ErroCod = -1;
                    ErroResultado.Erro = e.Message.ToString();
                    logEDocs.Error("OnBase.Biblioteca.E-Docs.EncerrarProcesso.Erro:", e);
                }
            }
            return eventoId;
        }
        #endregion
        /// <summary>
        /// Limita a instancia do E-Docs ao exigir url e token.
        /// </summary>
        /// <param name="url">Endereço "base" da API do E-Docs</param>
        /// <param name="token">Token do Usuário, Obtido pela Biblioteca Acesso Cidadão</param>
        public EDocsBiblioteca(string url, string token)
        {
            FileStream fs = new FileStream(@"C:\log4net\log4netEDocs.config", FileMode.Open);
            log4net.Config.XmlConfigurator.Configure(fs);
            fs.Close();
            ErroCod = -4;
            ErroResultado = new ErrorResult("Biblioteca E-Docs Iniciada", null, null);
            Url = url.Trim();
            if (Url.Substring(Url.Length - 1, 1) != "/")
            {
                Url = Url + "/";
            }
            Token = token;
        }
    }
    #endregion
    #region Classes
    /// <summary>
    /// Dados de certificado digital retornado pela API do E-Docs
    /// </summary>
    public class CertificadoDigital
    {
        [JsonProperty("validoAPartir")]
        public DateTime ValidoAPartir { get; private set; }
        [JsonProperty("validoAte")]
        public DateTime ValidoAte { get; private set; }
        /// <summary>
        /// Data da assinatura PKCS 7 Sign.
        /// </summary>
        [JsonProperty("pkcs7SignDate")]
        public DateTime Pkcs7SignDate { get; private set; }
        [JsonProperty("pessoaFisica")]
        public PessoaFisica PessoaFisica { get; private set; }
        [JsonProperty("pessoaJuridica")]
        public PessoaJuridica PessoaJuridica { get; private set; }
        public CertificadoDigital(DateTime validoAPartir, DateTime validoAte, DateTime pkcs7SignDate, PessoaFisica pessoaFisica, PessoaJuridica pessoaJuridica)
        {
            ValidoAPartir = validoAPartir;
            ValidoAte = validoAte;
            Pkcs7SignDate = pkcs7SignDate;
            PessoaFisica = pessoaFisica;
            PessoaJuridica = pessoaJuridica;
        }
    }
    public class CertificadoDigitalResposta
    {
        [JsonProperty("data")]
        public List<CertificadoDigital> DadosCertificados { get; private set; }
        [JsonProperty("isSuccess")]
        public bool IsSuccess { get; private set; }
        [JsonProperty("message")]
        public string Message { get; private set; }
        public CertificadoDigitalResposta(List<CertificadoDigital> dadosCertificados, bool isSuccess, string message)
        {
            DadosCertificados = dadosCertificados;
            IsSuccess = isSuccess;
            Message = message;
        }
    }
    /// <summary>
    /// Informações retornadas ao consultar os documentos de um ato.
    /// </summary>
    public class DocumentoAto
    {
        /// <summary>
        /// Identificador do ato
        /// </summary>
        [JsonProperty("id")]
        public string GUID { get; private set; }
        /// <summary>
        /// Nome do documento do ato
        /// </summary>
        [JsonProperty("documentoNome")]
        public string NomeDocumento { get; private set; }
        /// <summary>
        /// Identificador do documento do ato, se houver
        /// </summary>
        [JsonProperty("documentoId")]
        public string GUIDDocumento { get; private set; }
        /// <summary>
        /// Identificador do ato de desentranhamento do ato, se houver
        /// </summary>
        [JsonProperty("desentranhamentoId")]
        public string DesentranhamentoGUID { get; private set; }
        /// <summary>
        /// Se o documento é um termo do ato
        /// </summary>
        [JsonProperty("termo")]
        public bool Termo { get; private set; }
    }
    /// <summary>
    /// Objeto de Erro retornado do E-Docs.
    /// </summary>
    public class ErrorResult
    {
        [JsonProperty("error")]
        public string Erro { get; set; }
        [JsonProperty("stackTrace")]
        public string StackTrace { get; private set; }
        [JsonProperty("issues")]
        public IDictionary<string, string> Issues { get; private set; }
        public ErrorResult(string erro, string stackTrace, IDictionary<string, string> issues)
        {
            Erro = erro;
            StackTrace = stackTrace;
            Issues = issues;
        }
    }
    /// <summary>
    /// Interface da Implementação da GUID da Classe do Processo/Documento
    /// </summary>
    public interface IGUIDClasse
    {
        /// <summary>
        /// GUId da classe do documento ou Processo.
        /// </summary>
        [JsonProperty("idClasse")]
        string GUIDClasse { get; set; }
    }
    /// <summary>
    /// Objeto que será serializado para fazer o pedido de Entranhamento.
    /// </summary>
    public class PedidoDeEntranhamento
    {
        /// <summary>
        /// Justificativa do ato
        /// </summary>
        [JsonProperty("justificativa")]
        public string Justificativa { get; set; }
        /// <summary>
        /// Ids de documentos capturados anexados ao ato
        /// </summary>
        [JsonProperty("idsDocumentosEntranhados")]
        public List<string> GUIDsDocumentosEntranhados { get; set; }
        /// <summary>
        /// Dados para restrição de acesso do ato
        /// </summary>
        [JsonProperty("restricaoAcesso")]
        public RestricaoAcesso RestricaoAcesso { get; set; }
        /// <summary>
        /// GUID do processo para o ato
        /// </summary>
        [JsonProperty("idProcesso")]
        public string GUIDProcesso { get; set; }
        /// <summary>
        /// Id do papel de servidor que irá realizar o ato - o papel deve ter permissão de executar o ato
        /// </summary>
        [JsonProperty("idPapelResponsavel")]
        public string GUIDPapelResponsavel { get; set; }
    }
    /// <summary>
    /// Objeto que será serializado para fazer o pedido de Despacho.
    /// </summary>
    public class PedidoDespacho
    {
        /// <summary>
        /// Id do destinatário do despacho
        /// </summary>
        [JsonProperty("idDestino")]
        public string GUIDDestino { get; set; }
        /// <summary>
        /// Mensagem inserida no despacho
        /// </summary>
        [JsonProperty("mensagem")]
        public string Mensagem { get; set; }
        /// <summary>
        /// Ids de documentos capturados anexados ao ato
        /// </summary>
        [JsonProperty("idsDocumentosEntranhados")]
        public List<string> GUIDsDocumentosEntranhados { get; set; }
        /// <summary>
        /// Dados para restrição de acesso do ato
        /// </summary>
        [JsonProperty("restricaoAcesso")]
        public RestricaoAcesso RestricaoAcesso { get; set; }
        /// <summary>
        /// GUID do processo para o ato
        /// </summary>
        [JsonProperty("idProcesso")]
        public string GUIDProcesso { get; set; }
        /// <summary>
        /// Id do papel de servidor que irá realizar o ato - o papel deve ter permissão de executar o ato
        /// </summary>
        [JsonProperty("idPapelResponsavel")]
        public string GUIDPapelResponsavel { get; set; }
    }
    public class PedidoEncerrar
    {
        /// <summary>
        /// Justificativa do ato
        /// </summary>
        [JsonProperty("desfecho")]
        public string Desfecho { get; set; }
        /// <summary>
        /// Dados para restrição de acesso do ato
        /// </summary>
        [JsonProperty("restricaoAcesso")]
        public RestricaoAcesso RestricaoAcesso { get; set; }
        /// <summary>
        /// GUID do processo para o ato
        /// </summary>
        [JsonProperty("idProcesso")]
        public string GUIDProcesso { get; set; }
        /// <summary>
        /// Id do papel de servidor que irá realizar o ato - o papel deve ter permissão de executar o ato
        /// </summary>
        [JsonProperty("idPapelResponsavel")]
        public string GUIDPapelResponsavel { get; set; }
    }
    public class PessoaFisica
    {
        [JsonProperty("nome")]
        public string Nome { get; private set; }
        [JsonProperty("dataNascimento")]
        public DateTime DataNascimento { get; private set; }
        [JsonProperty("cpf")]
        public string CPF { get; private set; }
        [JsonProperty("nis")]
        public string NIS { get; private set; }
        [JsonProperty("rg")]
        public string RG { get; private set; }
        [JsonProperty("orgaoExpedidor")]
        public string OrgaoExpedidor { get; private set; }
        [JsonProperty("inss")]
        public string INSS { get; private set; }
        [JsonProperty("tituloEleitor")]
        public string TituloEleitor { get; private set; }
        [JsonProperty("zonaEleitoral")]
        public string ZonaEleitoral { get; private set; }
        [JsonProperty("secao")]
        public string Secao { get; private set; }
        [JsonProperty("municipio")]
        public string Municipio { get; private set; }
        public PessoaFisica(string nome, DateTime dataNascimento, string cPF, string nIS, string rG, string orgaoExpedidor, string iNSS, string tituloEleitor, string zonaEleitoral, string secao, string municipio)
        {
            Nome = nome;
            DataNascimento = dataNascimento;
            CPF = cPF;
            NIS = nIS;
            RG = rG;
            OrgaoExpedidor = orgaoExpedidor;
            INSS = iNSS;
            TituloEleitor = tituloEleitor;
            ZonaEleitoral = zonaEleitoral;
            Secao = secao;
            Municipio = municipio;
        }
    }
    public class PessoaJuridica
    {
        [JsonProperty("cnpj")]
        public string CNPJ { get; private set; }
        [JsonProperty("razaoSocial")]
        public string RazaoSocial { get; private set; }
        [JsonProperty("inss")]
        public string INSS { get; private set; }
        [JsonProperty("responsavel")]
        public PessoaFisica Responsavel { get; private set; }
        public PessoaJuridica(string cNPJ, string razaoSocial, string iNSS, PessoaFisica responsavel)
        {
            CNPJ = cNPJ;
            RazaoSocial = razaoSocial;
            INSS = iNSS;
            Responsavel = responsavel;
        }
    }
    /// <summary>
    /// Objeto Usado para ordenar os documentos para entranhar.
    /// </summary>
    public class PosicaoDocumento
    {
        public long Posicao { get; set; }
        public string GUID { get; set; }
    }
    /// <summary>
    /// Retorno dos endpoits de Busca de Processos.
    /// </summary>
    public class Processo
    {
        [JsonProperty("id")]
        public string GUID { get; private set; }
        [JsonProperty("ano")]
        public string Ano { get; private set; }
        [JsonProperty("protocolo")]
        public string Protocolo { get; private set; }
        [JsonProperty("resumo")]
        public string Resumo { get; private set; }
        [JsonProperty("situacao")]
        public ProcessoSituacao Situacao { get; private set; }
        public Processo(string gUID, string ano, string protocolo, string resumo, ProcessoSituacao situacao)
        {
            GUID = gUID;
            Ano = ano;
            Protocolo = protocolo;
            Resumo = resumo;
            Situacao = situacao;
        }
    }
    public enum ProcessoSituacao
    {
        SemRetorno = 0,
        EmAndamento = 1,
        Encerrado = 2,
        Sobrestado = 3
    }
    /// <summary>
    /// Evento é uma Classe Genérica. Todos atos entram em uma fila de evento na nova API, quando o evento é concluído as informações desta classe são preenchidas com id para consultar os atos no E-Docs.
    /// </summary>
    public class Evento
    {
        [JsonProperty("id")]
        public string GUID { get; private set; }
        [JsonProperty("idCidadao")]
        public string GUIDCidadao { get; private set; }
        [JsonProperty("situacao")]
        public EventoSituacao Situacao { get; private set; }
        [JsonProperty("criacao")]
        public DateTime Criacao { get; private set; }
        [JsonProperty("conclusao")]
        public DateTime Conclusao { get; private set; }
        [JsonProperty("tipo")]
        public EventoTipo Tipo { get; private set; }
        [JsonProperty("idProcesso")]
        public string GUIDProcesso { get; private set; }
        [JsonProperty("idAto")]
        public string GUIDAto { get; private set; }
        [JsonProperty("idTermo")]
        public string GUIDTermo { get; private set; }
        [JsonProperty("idEncaminhamento")]
        public string GUIDEncaminhamento { get; private set; }
        [JsonProperty("idDocumento")]
        public string GUIDDocumento { get; private set; }
        public override string ToString()
        {
            return $"Conteúdo do Evento = GUID: {GUID} / GUIDCidadao: {GUIDCidadao} / Situação: {Situacao} / Criação: {Criacao} / Conclusão: {Conclusao} / Tipo: {Tipo} / GUIDProcesso: {GUIDProcesso} / GUIDAto: {GUIDAto} / GUIDTermo: {GUIDTermo} / GUIDEncaminhamento: {GUIDEncaminhamento} / GUIDDocumento: {GUIDDocumento}";
        }
        public Evento(string gUID, string gUIDCidadao, EventoSituacao situacao, DateTime criacao, DateTime conclusao, EventoTipo tipo, string gUIDProcesso, string gUIDAto, string gUIDTermo, string gUIDEncaminhamento, string gUIDDocumento)
        {
            GUID = gUID;
            GUIDCidadao = gUIDCidadao;
            Situacao = situacao;
            Criacao = criacao;
            Conclusao = conclusao;
            Tipo = tipo;
            GUIDProcesso = gUIDProcesso;
            GUIDAto = gUIDAto;
            GUIDTermo = gUIDTermo;
            GUIDEncaminhamento = gUIDEncaminhamento;
            GUIDDocumento = gUIDDocumento;
        }
    }
    /// <summary>
    /// Identifica a Situação do Evento.
    /// </summary>
    public enum EventoSituacao
    {
        Criado = 1,
        Enfileirado = 2,
        Processando = 3,
        Executado = 4,
        Concluido = 5,
        Cancelado = 9
    }
    public enum EventoTipo
    {
        CapturaNatoDigitalICPBrasil = 101,
        CapturaNatoDigitalCopia = 102,
        CapturaNatoDigitalMultiplasAssinaturasServidor = 103,
        CapturaNatoDigitalMultiplasAssinaturasCidadao = 104,
        CapturaNatoDigitalAssinaturaEletronicaServidor = 105,
        CapturaNatoDigitalAssinaturaEletronicaCidadao = 106,
        CapturaDigitalizadoServidor = 107,
        CapturaDigitalizadoCidadao = 108,
        EncaminhamentoInicial = 201,
        EncaminhamentoPosterior = 202,
        AutuacaoProcesso = 301,
        DespachoProcesso = 302,
        DesentranhamentoProcesso = 303,
        EntranhamentoProcesso = 304,
        AvocamentoProcesso = 305,
        EncerramentoProcesso = 306,
        ReaberturaProcesso = 307,
        AjusteCustodiaProcesso = 308,
        SobrestamentoProcesso = 309,
        ProsseguimentoProcesso = 310,
        EdicaoProcesso = 311,
        CopiaProcesso = 312
    }
    /// <summary>
    /// Classe com todas informações para envio do Documento. Inicia Montagem no Script.
    /// Atenção Recomendo passar essa classe for referencia.
    /// </summary>
    public class DadosUpload
    {
        /// <summary>
        /// Arquivo PDF que será enviado já transformado em Byte.
        /// </summary>
        public byte[] Arquivo { get; set; }
        /// <summary>
        /// Preenchido na Primeira etapa de envio.
        /// </summary>
        public DocumentoArquivo DocumentoArquivo { get; set; }
        /// <summary>
        /// Tipo da classe dentro do DoucmentoRegistrar. pois no OnBase não funciona no switch com tipos de calasse.
        /// </summary>
        public string TipodaClasse { get; set; }
        /// <summary>
        /// Classe Pai que recebe o tipo correto de documento q será enviado.
        /// Recebe todas as Filhas.
        /// </summary>
        public DocumentoRegistrar DocumentoRegistrar { get; set; }
    }

    /// <summary>
    /// Dados básicos do documento retornado pela API do E-Docs.
    /// </summary>
    public class Documento
    {
        /// <summary>
        /// Identificador do documento capturado.
        /// </summary>
        [JsonProperty("id")]
        public string GUID { get; private set; }
        /// <summary>
        /// Registro do documento capturado.
        /// </summary>
        [JsonProperty("registro")]
        public string Registro { get; private set; }
        /// <summary>
        /// Nome do arquivo no E-Docs.
        /// </summary>
        [JsonProperty("nome")]
        public string Nome { get; private set; }
        /// <summary>
        /// Extensão do arquivo no E-Docs.
        /// </summary>
        [JsonProperty("extensao")]
        public string Extensao { get; private set; }
        public Documento(string gUID, string registro, string nome, string extensao)
        {
            GUID = gUID;
            Registro = registro;
            Nome = nome;
            Extensao = extensao;
        }
    }


    /// <summary>
    /// Dados para documento digitalizado capturado por cidadão. (3º Etapa)
    /// </summary>
    public class DocumentoDigitalizadoCidadao : DocumentoRegistrar
    {
        /// <summary>
        /// Classifica o Valor Legal.
        /// </summary>
        [JsonProperty("valorLegal")]
        public DocumentoValorLegal ValorLegal { get; set; }
    }
    /// <summary>
    /// Dados para documento nato-digital assinado via E-Docs capturados por cidadão. (3º Etapa)
    /// </summary>
    public class DocumentoNatoDigitalAssinaturaEletronicaCidadao : DocumentoRegistrar
    {
    }
    /// <summary>
    /// Dados para documento nato-digital assinado via E-Docs capturados por servidor. (3º Etapa)
    /// </summary>
    public class DocumentoNatoDigitalAssinaturaEletronicaServidor : DocumentoRegistrar, IServidorCapturadorAssinante, IGUIDClasse
    {
        public string GUIDClasse { get; set; }
        public string GUIDPapelCapturadorAssinante { get; set; }
    }
    /// <summary>
    /// Dados para documento nato-digital sem assinatura capturados por cidadão. (3º Etapa)
    /// </summary>
    public class DocumentoNatoDigitalCopiaCidadao : DocumentoRegistrar
    {
    }
    /// <summary>
    /// Dados básico de documento nato-digital com assinatura ICP-Brasil capturado por cidadão. (3º Etapa)
    /// </summary>
    public class DocumentoNatoDigitalIcpBrasilCidadao : DocumentoRegistrar
    {
    }
    /// <summary>
    /// Dados básico de documento nato-digital com assinatura ICP-Brasil capturado por servidor. (3º Etapa)
    /// </summary>
    public class DocumentoNatoDigitalIcpBrasilServidor : DocumentoRegistrar, IServidorCapturador
    {
        public string GUIdPapelCapturador { get; set; }
    }
    /// <summary>
    /// Dados básico de documento nato-digital com assinatura ICP-Brasil capturado por cidadão. (3º Etapa)
    /// </summary>
    public class DocumentoNatoDigitalMultiplasAssinaturasCidadao : DocumentoRegistrar, IMultiplasAss
    {
        public List<string> Assinantes { get; set; }
    }
    /// <summary>
    /// Dados básico de documento nato-digital com assinatura ICP-Brasil capturado por servidor. (3º Etapa)
    /// </summary>
    public class DocumentoNatoDigitalMultiplasAssinaturasServidor : DocumentoRegistrar, IMultiplasAss, IServidorCapturador, IGUIDClasse
    {
        public List<string> Assinantes { get; set; }
        public string IdClasse { get; set; }
        public string GUIdPapelCapturador { get; set; }
        public string GUIDClasse { get; set; }
    }
    /// <summary>
    /// Interface de Multiplas Assinaturas no Documento.
    /// </summary>
    public interface IMultiplasAss
    {
        /// <summary>
        /// Lista com as GUID dos Assinantes do Documento.
        /// </summary>
        [JsonProperty("assinantes")]
        List<string> Assinantes { get; set; }
    }
    /// <summary>
    /// Interface com a GUId do Papel do Capturador do Documento.
    /// </summary>
    public interface IServidorCapturador
    {
        
    }
    /// <summary>
    /// Interface com a GUId do Papel do Capturador do Documento, e Assinante.
    /// </summary>
    public interface IServidorCapturadorAssinante
    {
        /// <summary>
        /// Id do papel do servidor que irá capturar o documento.
        /// </summary>
        [JsonProperty("idPapelCapturadorAssinante")]
        string GUIDPapelCapturadorAssinante { get; set; }
    }
    /// <summary>
    /// Objeto usado pelo AutuacaoProcessoApiEntry.
    /// </summary>
    public class InteressadoSemIdentificacao
    {
        [JsonProperty("descricao")]
        public string Descricao { get; set; }
    }
    /// <summary>
    /// Objeto que será serializado para fazer o pedido de Autuação.
    /// </summary>
    public class PedidoDeAutuacao : IGUIDClasse
    {
        /// <summary>
        /// Id do papel do servidor responsável pela autuação - o papel deve ter essa permissão de autuar na Organização.
        /// </summary>
        [JsonProperty("idPapelResponsavel")]
        public string GUIDPapelResponsavel { get; set; }
        /// <summary>
        /// Id do local de autuação - o papel deve ter essa permissão de autuação nesse local.
        /// </summary>
        [JsonProperty("idLocal")]
        public string GUIDLocal { get; set; }
        /// <summary>
        /// Resumo ou título do processo
        /// </summary>
        [JsonProperty("resumo")]
        public string Resumo { get; set; }
        /// <summary>
        /// Lista de ids das PF interessadas no processo autuado.
        /// </summary>
        [JsonProperty("idsAgentesInteressados")]
        public List<string> PessoasFisicaInteressadas { get; set; }
        /// <summary>
        /// Lista de ids de agentes privados jurídicos interessados no processo autuado
        /// </summary>
        [JsonProperty("pessoasJuridicasInteressadas")]
        public List<PessoaJuridicaInteressada> PessoasJuridicaInteressadas { get; set; }
        [JsonProperty("idsDocumentosEntranhados")]
        public List<string> GUIDsDocumentosEntranhados { get; set; }
        public string GUIDClasse { get; set; }
    }
    /// <summary>
    /// Objeto usado pelo AutuacaoProcessoApiEntry.
    /// </summary>
    public class PessoaJuridicaInteressada
    {
        [JsonProperty("razaoSocial")]
        public string RazaoSocial { get; set; }
        [JsonProperty("cnpj")]
        public string CNPJ { get; set; }
        [JsonProperty("email")]
        public string Email { get; set; }
    }
    #endregion
}*/